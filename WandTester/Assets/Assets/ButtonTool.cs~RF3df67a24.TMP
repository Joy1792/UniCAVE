using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection.Emit;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class ButtonTool : MonoBehaviour, ITool {
    public GameObject canvas;
    RaycastHit hit;
    public GameObject wandObject;
    public GameObject holder;
    Slider s;
    bool hide = true;
    public Text txt;

    public void Analog(double x, double y)
    {
        throw new NotImplementedException();
    }

    public void ButtonClick(int buttonNum, Vector3 origin, Vector3 direction)
    {

        Physics.Raycast(origin, direction, out hit);
        //float distance = (canvas.transform.position - origin).magnitude;
        //hitInput = Physics2D.Raycast(origin, direction, distance + 10, Physics2D.DefaultRaycastLayers, distance - 1, distance + 1);
        //if(hitInput)
        //    Debug.Log("I am being hit button name " + hitInput.rigidbody.name);
        // Debug.DrawRay(origin, direction);
        //if (hitInput!=null)
        //{
        //hitInput.collider != null && hitInput.collider.tag == "button"

        if (hit.collider != null && hit.collider.tag == "button")
        {
            Button button = hit.transform.gameObject.GetComponent<Button>();
            //EventSystem.current.SetSelectedGameObject(button.gameObject);
            if (buttonNum == 3)
            {
                button.onClick.Invoke();
            }
                
        }

        if (hit.collider != null && hit.collider.tag == "dropdown")
        {
            Dropdown dropdown = hit.transform.gameObject.GetComponent<Dropdown>();

            //Selectable b = a.FindSelectableOnDown();
            //Selectable c = b.FindSelectableOnDown();
            //Button a = s.GetComponent<Button>();
            Debug.Log(dropdown.value);
            //EventSystem.current.SetSelectedGameObject(button.gameObject);
            if (buttonNum == 3)
            {
                if(hide == true)
                {
                    dropdown.Show();
                    hide = false;
                }
                else
                {
                    dropdown.Hide();
                    hide = true;
                }
            }

        }

        if (hit.collider != null && hit.collider.tag == "selectable")
        {
            Toggle t = hit.transform.gameObject.GetComponent<Toggle>();
            Dropdown d = t.GetComponentInParent<Dropdown>();

            int number = t.name[5] - 48;
            //txt = t.GetComponent<Text>();
            d.value = number;
            d.RefreshShownValue();
            //d.GetComponentInChildren<Label>(); 
            //txt.text = t.name;
            //d.itemText = txt;
            d.Hide();
            hide = true;

            if(buttonNum == 3)
            {
                Debug.Log(t);
            }
            
        }



        else if (hit.collider != null && hit.collider.tag == "slider")
        {
            //float distanceFromWand = canvas.transform.position.z - origin.z;
            s = hit.transform.gameObject.GetComponent<Slider>();
            //canvas = canvas.GetComponent<Canvas>();


            //Debug.Log(s.transform.localPosition);
            //Debug.Log("World Position " + s.transform.position);
            //Debug.Log("Local Position " + s.transform.localPosition);
            float width = s.GetComponent<RectTransform>().rect.width;
            //Vector3 left = s.transform.Translate(new Vector3(width / 2, 0, 0));
            Vector3 sliderMiddle = s.transform.TransformPoint(s.transform.TransformPoint(s.transform.localPosition));
            //sliderMiddle = s.transform.TransformPoint(s.transform.localPosition);
            //Debug.Log(s.transform.localPosition.x + width / 2 + " " + s.transform.localPosition.y + " "  + s.transform.localPosition.z);
            //Debug.Log(s.transform.localPosition.x - width / 2 + " " + s.transform.localPosition.y + " " + s.transform.localPosition.z);


            Vector3 sliderRight = s.transform.TransformPoint(new Vector3(s.transform.localPosition.x + width / 2, s.transform.localPosition.y, s.transform.localPosition.z)); //s.transform.TransformPoint(s.transform.TransformPoint(new Vector3(s.transform.localPosition.x + width / 2, s.transform.localPosition.y, s.transform.localPosition.z)));
            Vector3 sliderLeft = s.transform.TransformPoint(new Vector3(s.transform.localPosition.x - width / 2, s.transform.localPosition.y, s.transform.localPosition.z));
            float sliderWidth = Math.Abs(sliderRight.x - sliderLeft.x);
            //sliderRight = holder.transform.TransformPoint(new Vector3(400, s.transform.localPosition.y, s.transform.localPosition.z));


            




            //Debug.Log("Test " + sliderPos);
            //float sliderMiddle = s.transform.localPosition.x;
            //float sliderLeft = s.transform.localPosition.x - (s.GetComponent<RectTransform>().rect.width/2);
            //float sliderRight = s.transform.localPosition.x + (s.GetComponent<RectTransform>().rect.width / 2);
            //Debug.Log("X values of the slider " + sliderLeft + " " + sliderMiddle + " " + sliderRight);

            //sliderPos = transform.TransformDirection(sliderLeft, s.transform.localPosition.y, s.transform.localPosition.z);
            //Debug.Log(sliderPos);
            if (buttonNum == 3)
            {
                Debug.Log("slider hit " + hit.point);
                float point;
                //float pos = point / sliderWidth;
                if (hit.point.x > sliderMiddle.x)
                {
                    point = (hit.point.x - sliderMiddle.x) / (sliderWidth/2);
                    s.value = .5f + Math.Abs(point)/2;
                }
                else
                {
                    point = (sliderMiddle.x - hit.point.x) / (sliderWidth/2);
                    s.value = .5f - Math.Abs(point)/2;
                }




                //float width = s.GetComponent<Renderer>().bounds.size.x; //s.GetComponent<RectTransform>().rect.width * .0042f;
                float middle = s.transform.position.x;
                float distanceFromZero;
                float value;

                //if (middle > 0)
                //{
                //    //distanceFromZero = middle - width / 2f;
                //}
                //else
                //{
                //   // distanceFromZero = middle + width / 2f;
                //}

                ////width = (width * CanvasScaler);
                ////Do the slider dragging here
                ////Width of slider = .66
                //Debug.Log(hit.point.x);
                ////value = Math.Abs((distanceFromZero - (hit.point.x))) / (width);
                //if (distanceFromZero > 0)
                //{
                //    value = (Math.Abs(hit.point.x) - Math.Abs(distanceFromZero)) / width;
                //    s.value = value;
                //}
                //else
                //{
                //    value = (Math.Abs(hit.point.x) - Math.Abs(distanceFromZero)) / width;
                //    s.value = 1 - value;
                //}

            }

        }

        else
        {
            EventSystem.current.SetSelectedGameObject(null);
        }
    }

    public void ButtonDrag(RaycastHit hit_, Vector3 offset, Vector3 origin, Vector3 direction)
    {
        Physics.Raycast(origin, direction, out hit);
        
        if (hit_.collider.tag == "slider")
        {
            s = hit_.transform.gameObject.GetComponent<Slider>();
            canvas = GameObject.Find("Canvas");

            float width = s.GetComponent<RectTransform>().rect.width;
            float height = s.GetComponent<RectTransform>().rect.height;

            Vector3 sliderMiddle = s.transform.TransformPoint(s.transform.TransformPoint(s.transform.localPosition));
            Vector3 sliderRight = canvas.transform.TransformPoint(new Vector3(s.transform.localPosition.x + width / 2, s.transform.localPosition.y, s.transform.localPosition.z));
            Vector3 sliderLeft = canvas.transform.TransformPoint(new Vector3(s.transform.localPosition.x - width / 2, s.transform.localPosition.y, s.transform.localPosition.z));

            Vector3 sliderTop = canvas.transform.TransformPoint(new Vector3(s.transform.localPosition.x, s.transform.localPosition.y + height/2, s.transform.localPosition.z));
            Vector3 sliderBottom = canvas.transform.TransformPoint(new Vector3(s.transform.localPosition.x, s.transform.localPosition.y - height/2, s.transform.localPosition.z));

            Debug.Log("slider top " + sliderTop);
            Debug.Log("slider bottom " + sliderBottom);
            Debug.Log("slider middle " + sliderMiddle);
            print(hit.point);
            print("Width: " + width + " Height: " + height);

            float sliderWidth = Math.Abs(sliderRight.x - sliderLeft.x);
            float sliderHeight = Math.Abs(sliderTop.y - sliderBottom.y);
            //    hit_.transform.position = hit.point;
            //    //do nothing

            float point;
            if (s.direction == Slider.Direction.LeftToRight)
            {
                //float pos = point / sliderWidth;
                if (hit.point.x > sliderMiddle.x)
                {
                    point = (hit.point.x - sliderMiddle.x) / (sliderWidth / 2);
                    s.value = .5f + Math.Abs(point) / 2;
                }
                else
                {
                    point = (sliderMiddle.x - hit.point.x) / (sliderWidth / 2);
                    s.value = .5f - Math.Abs(point) / 2;
                }
            }

            else if(s.direction == Slider.Direction.RightToLeft)
            {
                //float pos = point / sliderWidth;
                if (hit.point.x > sliderMiddle.x)
                {
                    point = (sliderMiddle.x - hit.point.x) / (sliderWidth / 2);
                    s.value = .5f - Math.Abs(point) / 2;
                }
                else
                {
                    point = (hit.point.x - sliderMiddle.x) / (sliderWidth / 2);
                    s.value = .5f + Math.Abs(point) / 2;
                }
            }

            else if(s.direction == Slider.Direction.BottomToTop)
            {
                //float pos = point / sliderWidth;
                if (hit.point.y > sliderMiddle.y)
                {
                    point = (hit.point.y - sliderMiddle.y) / (sliderHeight / 2);
                    s.value = .5f + Math.Abs(point) / 2;
                }
                else
                {
                    point = (sliderMiddle.y - hit.point.y) / (sliderHeight / 2);
                    s.value = .5f - Math.Abs(point) / 2;
                }
            }

            else
            {
                //float pos = point / sliderWidth;
                if (hit.point.y > sliderMiddle.y)
                {
                    point = (sliderMiddle.y - hit.point.y) / (sliderHeight / 2);
                    s.value = .5f - Math.Abs(point) / 2;
                }
                else
                {
                    point = (hit.point.y - sliderMiddle.y) / (sliderHeight / 2);
                    s.value = .5f + Math.Abs(point) / 2;
                }
            }
            

            
           
        }
        
    }

    public void init()
    {
        throw new NotImplementedException();
    }

    public void shutDown()
    {
        //throw new NotImplementedException();
    }

    // Use this for initialization
    void Start () {
        //Get all necessary game objects
        if (wandObject == null)
        {
            wandObject = GameObject.Find("Wand");
        }

        if (holder == null)
        {
            holder = GameObject.Find("IQWall_Seq_1PC");
        }
    }
	
	// Update is called once per frame
	void Update () {
		
	}
}
